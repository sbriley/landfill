---
title: "LandfillShrubs.qmd"
format: html
editor: visual
---

## Import Data

### Import library

```{r}
library(readr)
library(assertthat)
library(tidyverse)
library(lmerTest)
library(lme4)
library(vegan)
```

### Shrub data

```{r}
data.march <- read.csv("./raw-data/Landfill_shrub_March_data.csv")
data.april <- read.csv("./raw-data/Landfill_shrub_data.csv")

# drop rows without a date, since there are lots of rows with empty strings
data.march[data.march==''] = NA
data.march = data.march |> filter(!is.na(Date))
data.april[data.april==''] = NA
data.april = data.april |> filter(!is.na(Date))

## Drop first row, since it is descriptive
data.april = data.april[2: nrow(data.april),]

# Create shrub ids
data.april$shrub_id <- paste(data.april$Site, data.april$Shrub_location, sep='-')
data.march$shrub_id <- paste(data.march$Site, data.march$Shrub_location, sep='-')
```

All Plant IDs

-   There are some plants only from march, but every april plant was also in march

```{r}
assert_that(sum(!(data.april$shrub_id %in% data.march$shrub_id)) == 0,
            msg = "All april shrubs should be present in march data")
```

### Soil Data

```{r}
soil.names = readxl::read_excel("./raw-data/soil.XLSX", range = "A8:AB9", col_names = F)
soil.1 = readxl::read_excel("./raw-data/soil.XLSX", range = "A10:AB15", col_names = FALSE, col_types = c("text", "text", rep(c("numeric"), each=26)))

soil.2 = readxl::read_excel("./raw-data/soil.XLSX", range = "A26:W40", col_names = FALSE, col_types = c("text", "text", rep(c("numeric"), each=21)))

# observation rows
column_names = unname(c(soil.names[2,1:2], soil.names[1,3:28])) |>
  str_replace(' ', "_") |> 
  str_replace("0\\.", "pt") |> 
  str_replace('\\)', '') |> 
  str_replace('\\(','') |>
  str_replace('\\r\\n', "_")

units = unname(c(soil.names[2,1:28])) |> 
  str_extract("(?<=\r\n).*") |> 
  str_replace("/", "_")
units[1:2] = ""

column_names = paste(column_names, units, sep="_")

colnames(soil.1) = column_names
colnames(soil.2) = column_names

soil_messy = bind_rows(soil.1, soil.2) 

soil_messy = soil_messy |> rename(
  Lab_sample_num = `LAB_SAMPLE_#_`,
  Client_description = Client__Description_,
  pH = pH_,
  SAR = SAR_
)
```

## Tidy format

```{r}
data = bind_rows(
  data.march |> 
    rename(
      Height_cm = Height_cm_1,
      Plant_status = Plant_status_1
      ) |> 
    mutate(
      Shrub_location = as.numeric(Shrub_location),
      Date = mdy(Date)
      ),
  data.april |> 
    rename(
      Height_cm = Height_cm_2,
      Plant_status = Plant_status_2
      ) |> 
    mutate(
      Shrub_location = as.numeric(Shrub_location),
      Height_cm = as.numeric(Height_cm),
      Date = mdy('4/30/2024')
      ))
```

## Validation

We would expect that:

-   Plants with same shrub_id have same species

    ```{r}
    # Resolution

    mismatching_species = data |> 
      select(c(shrub_id, Species, Date, Plant_status, Notes)) |> 
      pivot_wider(names_from = Date, values_from = c(Species, Plant_status, Notes)) |> 
      filter(`Species_2024-03-01` != `Species_2024-04-30`)

    # For the one that was first alive and is now dead, use the species from when it was alive
    data[data$shrub_id == "LF5S-14" & data$Date == "2024-04-30", "Species"] = 'ARTCAL'

    mismatching_species = data |> 
      select(c(shrub_id, Species, Date, Plant_status, Notes)) |> 
      pivot_wider(names_from = Date, values_from = c(Species, Plant_status, Notes)) |> 
      filter(`Species_2024-03-01` != `Species_2024-04-30`)

    # Filter the rest out
    data = data |> 
      filter(!(shrub_id %in% mismatching_species$shrub_id))

    mismatching_species = data |> 
      select(c(shrub_id, Species, Date, Plant_status, Notes)) |> 
      pivot_wider(names_from = Date, values_from = c(Species, Plant_status, Notes)) |> 
      filter(`Species_2024-03-01` != `Species_2024-04-30`)


    assert_that(
      nrow(mismatching_species) == 0,
      msg = "Should be no mismatching species"
    )

    # (`[[`)("colname")),
    ```

-   Plants would not be dead in march and alive in april

    ```{r}
    undead_shrubs = data |> 
      select(c(shrub_id, Date, Plant_status)) |> 
      pivot_wider(names_from = Date, values_from = Plant_status) |> 
      filter(`2024-03-01` == 'Dead') |> 
      filter(`2024-04-30` == 'Alive')

    assert_that(
      nrow(undead_shrubs) == 0,
      msg = "Should be no vampire shrubs that came back from the dead"
    )
    ```

-   Plants that have missing species in April are the same as in March

    ```{r}
    data = data |> 
      select(c(shrub_id, Date, Species)) |> 
      pivot_wider(
        values_from = Species,
        names_from = Date
      ) |> 
      mutate(
        Species = `2024-03-01`
      ) |> 
      select(-c(`2024-03-01`, `2024-04-30`)) |> 
      left_join(data |> select(-c(Species)), join_by(shrub_id))
    ```

-   Plants that have missing status data and were dead in march are still dead

    ```{r}
    data = data |> 
      select(c(shrub_id, Date, Plant_status)) |> 
      pivot_wider(values_from = Plant_status, names_from = Date) |> 
      mutate(
        `2024-04-30` = case_when(
          `2024-03-01` == "Dead" & is.na(`2024-04-30`) ~ "Dead",
          .default = `2024-04-30`
          ) 
        ) |>    
      pivot_longer(!shrub_id, names_to = "Date",  values_to = "Plant_status") |> 
      mutate(
        Date = ymd(Date)
      ) |> 
      right_join(
        data |> select(-c(Plant_status)), 
        by=join_by(Date, shrub_id))

    ```

## Cleaning

### Shrubs

```{r}
measurements = data |> select(-c(Team, Chlorophyll_Team)) |> mutate(
    Month = case_when(
      month(Date) == 3 ~ "March",
      month(Date) == 4 ~ "April")) |> mutate(
  Site_numeric_id = 
    as.numeric(factor(Site, levels=unique(Site)))
)

shrubs = measurements |> 
  pivot_wider(
    id_cols = c(shrub_id),
    names_from = c(Date),
    values_from = c(
      Height_cm, 
      Plant_status, 
      Notes,
      Leaf1_Chlorophyll, 
      Leaf2_Chlorophyll, 
      Leaf3_Chlorophyll, 
      Chlorophyll_Team_Notes,
      Month
      ),
    unused_fn = unique
) |> select(-c(
  `Leaf1_Chlorophyll_2024-03-01`, 
  `Leaf2_Chlorophyll_2024-03-01`, 
  `Leaf3_Chlorophyll_2024-03-01`, 
  `Chlorophyll_Team_Notes_2024-03-01`)
  ) |> rename(
  Leaf1_Chlorophyll = `Leaf1_Chlorophyll_2024-04-30`,
  Leaf2_Chlorophyll = `Leaf2_Chlorophyll_2024-04-30`,
  Leaf3_Chlorophyll = `Leaf3_Chlorophyll_2024-04-30`,
  Chlorophyll_Notes = `Chlorophyll_Team_Notes_2024-04-30` 
  ) |> mutate(
    Height_change_cm = `Height_cm_2024-04-30` - `Height_cm_2024-03-01`
  ) |> mutate(
    Percent_height_change = Height_change_cm / `Height_cm_2024-03-01`
  )
```

### Soil

```{r}
soil_messy[soil_messy == "ISM"] = NA

soil = soil_messy |>
   fill(
     Client_description,
     `SP_%`,
     .direction = "down") |> 
   separate(Lab_sample_num, into = c('Sample_num', 'Lab_sample_test_num'), fill = 'right') |>
   separate(Client_description, into = c('Location', 'Depth')) |>
   mutate(
     Lab_sample_test_num = case_when(
       Lab_sample_test_num == "dup" ~ 2,
       is.na(Lab_sample_test_num) ~ 1
       ),
     Soil_type = str_extract(Location, '(?<=\\d)(S)')
     ) |>
   mutate(
     Soil_type = case_when(
       Soil_type == "S" ~ "S",
       .default = "N"
     )
     ) |> 
   relocate(
      Soil_type, .after = Location
    ) |> 
   mutate_all(function(x) str_replace(x, "<", '')) |> 
  mutate_at(
    .vars = vars(-c('Location','Soil_type', 'Depth')),
    as.numeric
  )

```

At this point, there are three clean data frames for the analysis:

1.  `measurements`: All observations from march and April
2.  `shrubs`: One record per shrub, including measurements from both March and April, and the change in height
3.  `soil`: One record per soil sample. Some locations have depths, and some have multiple samples at the same depth.

## Analysis

### Helpers

##### Plot Values

Define colors for graphs and labels

```{r}
orange_p = "#f2790f"
orange_s = "#f5cfae"

brown_p = "#785c44"
brown_s = "#bdb4ac"

scoured_primary = brown_p
scoured_secondary = brown_s
nonscoured_primary = orange_p
nonscoured_secondary = orange_s

soil_type_labels = c(N = "Unscoured", S = "Scoured")
species_labels = c(ENCCAL = "Encelia californica", ARTCAL = "Artemisia california", ERIFAS = "Eriogonum fasciculatum", SALMEL = "Salvia mellifera")
species_labels_newline = c(ENCCAL = "Encelia\ncalifornica", ARTCAL = "Artemisia\ncalifornia", ERIFAS = "Eriogonum\nfasciculatum", SALMEL = "Salvia\nmellifera")
```

##### Write data

Functions to write data files

```{r}
SHOULD_WRITE_FILES = T
FIGURE_WIDTH = 7
FIGURE_HEIGHT = 4.5
OUTPUT_FILE_PATH = "./landfill-output/"

write_plot = function(output, plot_name, analysis_name) {
  if(SHOULD_WRITE_FILES) {
    ggsave(plot = output, width = FIGURE_WIDTH, height = FIGURE_HEIGHT,filename=paste(OUTPUT_FILE_PATH, analysis_name,"-",plot_name, ".jpg", sep = ""))
  }
}

write_table = function(model, model_name, analysis_name) {
  if(SHOULD_WRITE_FILES) {
    write.csv(model, paste(OUTPUT_FILE_PATH, analysis_name,"-",model_name, ".csv", sep = ""))
  }
}
```

##### Summarize T tests

Function to summarize ttests in an exportable format.

```{r}
summarize_ttest = function (ttest_results) {
  summary = bind_cols(
    data = ttest_results$data,
    t = ttest_results$statistic,
    df = ttest_results$parameter,
    p.value = ttest_results$p.value,
    confidence_int_lower = ttest_results$conf.int[1],
    confidence_int_upper = ttest_results$conf.int[2],
    confidence_int_level = attributes(ttest_results$conf.int)$conf.level,
    se = ttest_results$stderr,
  )
  summary[names(ttest_results$estimate[1])] = ttest_results$estimate[1]
  summary[names(ttest_results$estimate[2])] = ttest_results$estimate[2]

  summary
}
```

```{r}

facet_species = function(Species) {
  facet_grid(~Species, labeller = labeller(
    Species = species_labels_newline
  ))
}

facet_species_theme = theme(strip.text = element_text(face = "italic"))

scale_fill_soil = scale_fill_manual(
  labels = soil_type_labels,
  values = c(
    N = nonscoured_primary,
    S = scoured_primary
  )
)

scale_x_soil = scale_x_discrete(
  labels = soil_type_labels,
  guide = guide_axis(angle = 60)
)

label_soil = "Soil Type"

label_ec = "Electrical Conductance (dS/m)"

legend_species_theme = theme(legend.text = element_text(face = "italic"))

scale_color_species = scale_color_manual(
    labels = species_labels,
    values = c(viridis::viridis(5))
  )

```

### Research Questions

1.  Did shrub survival, growth, and chlorophyll content vary depending on the particular species planted, the visually-assessed soil conditions (scoured or unscoured) or the interaction between species and soil?

2.  Did quantitative soil measurements vary depending on the visually-assessed soil conditions?

3.  Were quantitative soil measurements significantly related to the survival, growth, or chlorophyll content of native shrubs?

### Summary

#### Plant Measurements

Summarize all plant measurements

```{r}
measurements |> ggplot() + 
  aes(x = Species, fill = Species) + 
  geom_bar() + 
  facet_grid(~ Date)
  
measurements |> 
  filter(Plant_status == 'Alive') |> 
  ggplot() + 
  aes(x = Species, fill = Species) + 
  geom_bar() + 
  facet_grid(~ Date)

```

#### Soil Measurements

```{r}
soil |> ggplot() +
  aes(x = Location, fill = Soil_type) +
  geom_bar()
```

### Question 1: Impact of Soil Conditions on Plants

#### Growth

##### Data

-   Filter out data that don't have before and after heights

-   Create a set with only living shrubs, because if the plant is dead, its change in height may not be reflective.

-   [ ] should I try to treat status as a factor instead of filtering it out? come back to this.

```{r}
# shrubs with measurements at both sampling times
height_change_shrubs = shrubs |>
  filter(!is.na(Height_change_cm))

# shrubs with measurements at both sampling times, that are alive 
height_change_shrubs_alive = height_change_shrubs |>
  filter(`Plant_status_2024-04-30` == "Alive")
```

##### Summarize

```{r}
height_change_summary_table = height_change_shrubs_alive |> 
  group_by(Species, Soil) |>
  summarise(
    mean_percent_height_change = mean(Percent_height_change),
    mean_height_change = mean(Height_change_cm),
    count = n(),
    sd_percent_height_change = sd(Percent_height_change),
    se_percent_height_change = sd(Percent_height_change)/sqrt(n())
  ) 
 
write_table(height_change_summary_table, "summary-table", "height")

height_change_summary_table
```

##### Visualize

```{r}
# Bar graph with sd and error bars
height_box_plot = height_change_shrubs_alive |> ggplot(
    aes(x = Soil, y = Percent_height_change, fill = Soil)
  ) + 
  stat_summary(
    fun = mean, 
    geom= "col", 
    position = "dodge"
  ) +
  stat_summary(
    fun.data = mean_se, 
    geom = "errorbar", 
    position = position_dodge(0.9), 
    width = 0.1
  ) + 
  facet_species(Species) +
  facet_species_theme +
  scale_fill_soil +
  scale_x_soil +
  labs(
    title = "Impact of Soil Type on Plant growth per Species",
    y = "Percent height change",
    x = label_soil
  )

height_box_plot

write_plot(height_box_plot, "box-plot", "height")
```

##### Models and Normality

```{r}
height_change_shrubs_alive |> ggplot() +
  aes(x = Height_change_cm) +
  geom_histogram()

height_model_interactions = 
  glm(Height_change_cm ~ Species * Soil, data = height_change_shrubs_alive)
height_model_no_interactions = 
  glm(Height_change_cm ~ Species + Soil, data = height_change_shrubs_alive)
height_model_species = 
  glm(Height_change_cm ~ Species, data = height_change_shrubs_alive)

plot(height_model_interactions)
plot(height_model_no_interactions)
plot(height_model_species) 

percent_height_model_interactions = glm(Percent_height_change ~ Species * Soil, data = height_change_shrubs_alive)
percent_height_model_no_interactions= glm(Percent_height_change ~ Species + Soil, data = height_change_shrubs_alive)
percent_height_model_species= glm(Percent_height_change ~ Species, data = height_change_shrubs_alive)
percent_height_model_soil= glm(Percent_height_change ~ Soil, data = height_change_shrubs_alive)


```

##### ANOVA

```{r}
AIC(height_model_interactions)
AIC(height_model_no_interactions)
AIC(height_model_species)

AIC(percent_height_model_interactions)
AIC(percent_height_model_no_interactions)

summary(height_model_interactions)
summary(height_model_no_interactions)
summary(height_model_species)

summary(percent_height_model_interactions)
summary(percent_height_model_no_interactions)
summary(percent_height_model_species)
summary(percent_height_model_soil)


```

###### Location as random effect?

```{r}
summary(lmer(Percent_height_change ~ Soil * Species + (1|Site_numeric_id), data = height_change_shrubs_alive |> mutate(
  Site_id = as.numeric(
    factor(Site, levels=unique(Site))
    )
  )))
```

##### T-tests

```{r}


artcal_height_ttest = t.test(Height_change_cm ~ Soil, data = height_change_shrubs_alive |> filter(Species == "ARTCAL"))

write_table(summarize_ttest(artcal_height_ttest), "ttest-artcal", "height")

artcal_height_ttest

enccal_height_ttest = t.test(Height_change_cm ~ Soil, data = height_change_shrubs_alive |> filter(Species == "ENCCAL"))

write_table(summarize_ttest(enccal_height_ttest), "ttest-enccal", "height")

enccal_height_ttest

salmel_height_ttest = t.test(Height_change_cm ~ Soil, data = height_change_shrubs_alive |> filter(Species == "SALMEL"))

write_table(summarize_ttest(salmel_height_ttest), "ttest-salmel", "height")

salmel_height_ttest
```

```{r}

artcal_height_ttest = t.test(Percent_height_change ~ Soil, data = height_change_shrubs_alive |> filter(Species == "ARTCAL"))

write_table(summarize_ttest(artcal_height_ttest), "ttest-artcal", "height-percent")

artcal_height_ttest

enccal_height_ttest = t.test(Percent_height_change ~ Soil, data = height_change_shrubs_alive |> filter(Species == "ENCCAL"))

write_table(summarize_ttest(enccal_height_ttest), "ttest-enccal", "height-percent")

enccal_height_ttest

salmel_height_ttest = t.test(Percent_height_change ~ Soil, data = height_change_shrubs_alive |> filter(Species == "SALMEL"))

write_table(summarize_ttest(salmel_height_ttest), "ttest-salmel", "height-percent")

salmel_height_ttest
```

#### Survival

model: `Survival ~ Species * Soil`

##### Data

```{r}
survival_data = measurements |> 
  filter(Month == 'April') |> 
  select(c(shrub_id, Plant_status, Soil, Species, Notes, Site)) |>
  mutate(
    Survival_index = case_when(
      Plant_status == 'Alive' ~ 1, 
      Plant_status == 'Dead' ~ 0, 
      .default = NA
      )
    ) |>
  filter(!is.na(Survival_index))
```

##### Summarize

```{r}
survival_summary_table = survival_data |> group_by(
  Soil, Species
) |> summarise(
  Percent_Alive = sum(Plant_status == 'Alive') / n(),
  `Survival Rate` = sum(Plant_status == 'Alive') / n(),
  Percent_Dead = sum(Plant_status == 'Dead') / n(),
  Count = n()
)

write_table(survival_summary_table
            |> select(-c(Percent_Alive, Percent_Dead)), "summary-table", "survival")

survival_summary_table
```

##### Visualize

###### Survival Bar Plot

```{r}
survival_bar_plot = survival_data |> ggplot() + 
  aes(
    x = Soil, 
    fill = interaction(
      factor(Plant_status, levels = c("Dead", "Alive")),
      factor(Soil)
      ),
    ) +
  geom_bar(position = "stack") +
  facet_species(Species) +
  scale_fill_manual(
    labels = c(
      Alive.S = "Alive (scoured)",
      Dead.S = "Dead (scoured)",
      Alive.N = "Alive (unscoured)",
      Dead.N = "Dead (unscoured)"
    ),
    values = c(
      Alive.S = scoured_primary, Dead.S = scoured_secondary,
      Alive.N = nonscoured_primary, Dead.N = nonscoured_secondary
      )
    ) + 
  scale_x_soil +
  labs(
    fill = "Soil type & Plant status",
    x = label_soil,
    y = "Number of Plants",
    title = "Impact of soil type on plant survival per species"
    ) 

survival_bar_plot

write_plot(
  survival_bar_plot,
  "bar-plot",
  "survival"
)


```

###### Percent Survival Bar Plot

```{r}
survival_summary_table |> 
  pivot_longer(
    cols = c(Percent_Alive, Percent_Dead),
    names_to = 'Status',
    values_to = 'Percent'
  ) |> select(-c(`Survival Rate`)) |>
  mutate(
    Count = Percent * Count, 
    Status = case_when(
      Status == 'Percent_Alive' ~ 'Alive',
      Status == 'Percent_Dead' ~ 'Dead'
    )
  )  |> 
  ggplot() +
  aes(x = Soil, 
      y = Percent,
    fill = interaction(
      factor(Status, levels = c("Dead", "Alive")),
      factor(Soil)
      ),
    ) +
  geom_col() +
  facet_grid(~ Species) +
  geom_text(
    data = survival_summary_table, 
    aes(label = Count, x = Soil, y = 1, fill = Soil),
    vjust = 1.5
    ) +
  scale_fill_manual(
    labels = c(
      Alive.S = "Alive (scoured)",
      Dead.S = "Dead (scoured)",
      Alive.N = "Alive (unscoured)",
      Dead.N = "Dead (unscoured)"
    ),
    values = c(
      Alive.S = scoured_primary, Dead.S = scoured_secondary,
      Alive.N = nonscoured_primary, Dead.N = nonscoured_secondary
      )
    ) + 
  labs(
    fill = "Soil type & Plant status",
    x = "Soil type",
    y = "Percent of plants",
    title = "Impact of soil type on percent survival per species"
    ) +
  scale_x_discrete(labels = soil_type_labels,
                   guide = guide_axis(angle = 60)) -> percent_survival_plot

write_plot(percent_survival_plot, "percent-col-plot", "survival")
```

```{r}
survival_data |> ggplot() +
  aes(
    x = Soil, 
    fill = interaction(
      factor(Plant_status, levels = c("Dead", "Alive")),
      factor(Soil)
      ),
    ) +
  geom_bar(position = "stack") +
  facet_grid(~ Species) +
  scale_fill_manual(
    labels = c(
      Alive.S = "Alive (scoured)",
      Dead.S = "Dead (scoured)",
      Alive.N = "Alive (unscoured)",
      Dead.N = "Dead (unscoured)"
    ),
    values = c(
      Alive.S = scoured_primary, Dead.S = scoured_secondary,
      Alive.N = nonscoured_primary, Dead.N = nonscoured_secondary
      )
    ) + 
  labs(
    fill = "Soil type & Plant status",
    x = "Soil type",
    y = "Number of Plants",
    title = "Impact of soil type on plant survival per species"
    ) +
  scale_x_discrete(labels = soil_type_labels,
                   guide = guide_axis(angle = 60))

write_plot(
  survival_bar_plot,
  "bar-plot",
  "survival"
)
```

##### Model and Normality

```{r}

soil_survival_model = glm(Survival_index ~ Soil * Species, data = survival_data, family = "binomial")

soil_survival_no_erifas_model = glm(Survival_index ~ Soil * Species, data = survival_data |> filter(
  Species != 'ERIFAS'
), family = "binomial")

plot(soil_survival_model)
plot(soil_survival_no_erifas_model)

```

Looks a bit better without "ERIFAS", which we will exclude since there are only 4 individuals total, and 2 per soil type.

##### Analysis and Tests

Chi square test

```{r}
survival_test = car::Anova(soil_survival_model)

write_table(survival_test, "chisq", "survival")

survival_test
```

Results

-   Significant(ish?) interaction between Soil and Species on survival, aka the survival of some species is more likely to be affected by soil type than others. However, take with a grain of salt as P value is `0.087`.

##### Species-specific

```{r}
car::Anova(glm(Survival_index ~ Soil, data = survival_data |> filter(
  Species == 'ENCCAL'
), family = "binomial"))

car::Anova(glm(Survival_index ~ Soil, data = survival_data |> filter(
  Species == 'ARTCAL'
), family = "binomial"))

car::Anova(glm(Survival_index ~ Soil, data = survival_data |> filter(
  Species == 'SALMEL'
), family = "binomial"))


```

#### Chlorophyll Content

##### Get data

```{r}
chlorophyll_data = measurements |> 
  filter(Month == 'April') |> 
  select(c(
    shrub_id, 
    Site,
    Soil,
    Species,
    Leaf1_Chlorophyll, 
    Leaf2_Chlorophyll, 
    Leaf3_Chlorophyll, 
    Chlorophyll_Team_Notes
    )) |> 
  pivot_longer(
    cols = c(Leaf1_Chlorophyll, Leaf2_Chlorophyll, Leaf3_Chlorophyll),
    values_to = 'Chlorophyll',
    names_to = "Leaf"
  ) |> mutate(
    Leaf = case_when(
      Leaf == "Leaf1_Chlorophyll" ~ as.numeric(1),
      Leaf == "Leaf2_Chlorophyll" ~ as.numeric(2),
      Leaf == "Leaf3_Chlorophyll" ~ as.numeric(3)
    )
  ) |> filter(
    !is.na(Chlorophyll)
  ) 

 chlorophyll_data_mean = chlorophyll_data |> 
  group_by(shrub_id, Soil, Species, Chlorophyll_Team_Notes, Site) |> 
   summarise(
    Mean_Chlorophyll = mean(Chlorophyll)
   ) |> ungroup()
```

##### Summarize Data

```{r}
chlorophyll_summary_table = chlorophyll_data_mean |> group_by(
  Soil, Species
) |> summarise(
  'Mean Chlorophyll' = mean(Mean_Chlorophyll),
  Count = n(),
  sd = sd(Mean_Chlorophyll),
  se = sd(Mean_Chlorophyll)/sqrt(n())
) |> fill(
  Count
)

write_table(chlorophyll_summary_table, "summary-table", "chlorophyll")

chlorophyll_data_summary_plot = chlorophyll_data_mean |> ggplot() +
  aes(x = Soil, fill = Soil) + 
  geom_bar(position = 'dodge') + 
  facet_grid(~Species) + 
  labs(
    title = "Total number of living plants with Chlorophyll measurements per soil type",
    x = "Soil Type",
    y = "Number of Plants"
  ) +
  scale_fill_manual(
    values = c(N = nonscoured_primary, S = scoured_primary),
        labels=soil_type_labels
) +
  scale_x_discrete(
    labels =soil_type_labels,
    guide = guide_axis(angle = 60)
  ) 

write_plot(chlorophyll_data_summary_plot, "summary-plot", "chlorophyll")

chlorophyll_data_summary_plot

```

##### Visualize

```{r}
chlorophyll_data_mean |> ggplot() + 
  aes(x = Mean_Chlorophyll) +
  geom_histogram()

chlorophyll_barplot = chlorophyll_data_mean |> 
  complete(Soil, Species, fill = list(Mean_Chlorophyll = 0)) |>
  ggplot(
    aes(x = Soil, y = Mean_Chlorophyll, fill = Soil)
  ) +
  stat_summary(
    fun = mean, 
    geom= "col", 
    position = "dodge"
  ) +
  stat_summary(
    fun.data = mean_se, 
    geom = "errorbar", 
    position = position_dodge(0.9), 
    width = 0.1
  ) + 
  facet_species(Species) +
  facet_species_theme +
  scale_fill_soil + 
  scale_x_soil +
  labs(
    fill = label_soil,
    title = "Impact of Soil on Chlorophyll Content per Species",
    y = "Mean Chlorophyll Content per Plant",
    x = label_soil
  )


chlorophyll_barplot

write_plot(chlorophyll_barplot, "bar-plot", "chlorophyll")

```

##### Models and Normality

```{r}
chlorophyll_with_interactions = glm(Mean_Chlorophyll ~ Species * Soil, data = chlorophyll_data_mean)

plot(chlorophyll_with_interactions)
```

Try to group by plant as a random effect

```{r}

model1 = lmer(Chlorophyll ~ Soil * Species + (1|shrub_id), data = chlorophyll_data)
```

##### ANOVA

```{r}

AIC(chlorophyll_with_interactions)
AIC(model1)

chlorophyll_test = summary(chlorophyll_with_interactions)

# AIC is much worse for this one even though the results are similar
summary(model1) 

write_table(chlorophyll_test$coefficients, "anova", "chlorophyll")

chlorophyll_test
chlorophyll_test$coefficients
```

##### ANOVAs for individual species

Are individual species normally distributed?

```{r}
chlorophyll_data_mean |> ggplot() +
  aes(x = Mean_Chlorophyll) + 
  geom_histogram() +
  facet_grid(Species ~ Soil)

tmp = shapiro.test(chlorophyll_data_mean$Mean_Chlorophyll)

chlorophyll_data_mean |> 
  filter(Species != 'ERIFAS') |>
  group_by(Species, Soil) |> 
  summarise(
    shapiro.test(Mean_Chlorophyll)$p.value,
    shapiro.test(Mean_Chlorophyll)$statistic
  )
```

```{r}
enccal_chlorophyll = glm(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(
  Species == "ENCCAL"
))  |> car::Anova()

write_table(enccal_chlorophyll, "anova-enccal", "chlorophyll")

enccal_chlorophyll

artcal_chlorophyll = glm(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(
  Species == "ARTCAL"
)) |> car::Anova()

artcal_chlorophyll

write_table(artcal_chlorophyll, "anova-artcal", "chlorophyll")

salmel_chlorophyll = glm(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(
  Species == "SALMEL"
)) |> car::Anova()

salmel_chlorophyll

write_table(salmel_chlorophyll$coefficients, "anova-salmel", "chlorophyll")


```

##### T-tests

```{r}


enccal_chlorophyll_ttest = t.test(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(Species == "ENCCAL"))

write_table(summarize_ttest(enccal_chlorophyll_ttest), "ttest-enccal", "chlorophyll")

enccal_chlorophyll_ttest


artcal_chlorophyll_ttest = t.test(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(Species == "ARTCAL"))

write_table(summarize_ttest(artcal_chlorophyll_ttest), "ttest-artcal", "chlorophyll")

artcal_chlorophyll_ttest

salmel_chlorophyll_ttest = t.test(Mean_Chlorophyll ~ Soil, data = chlorophyll_data_mean |> filter(Species == "SALMEL"))

write_table(summarize_ttest(salmel_chlorophyll_ttest), "ttest-salmel", "chlorophyll")

salmel_chlorophyll_ttest

```

### Question 2: Soil Conditions and Quantitative Measurements

#### Salinity T-test

##### Visualize

```{r}
soil |> ggplot() +
  aes(x = Soil_type, EC_dS_m, fill = Soil_type, color = Soil_type) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.3, height = 0, shape = 4) +
  scale_color_manual(
    values = c(
      "N" = nonscoured_primary,
      "S" = scoured_primary
    )
  ) +
  scale_fill_manual(
    values = c(
      N = nonscoured_secondary,
      S = scoured_secondary
    )
  )
```

```{r}
soil_salinity_by_type_plot =
  soil |> ggplot() +
  aes(x = Soil_type, y = EC_dS_m, fill = Soil_type) +
  stat_summary(
    fun = mean, 
    geom= "col", 
    position = "dodge"
  ) +
  stat_summary(
    fun.data = mean_se, 
    geom = "errorbar", 
    position = position_dodge(0.9), 
    width = 0.1
  ) +
  #geom_jitter(width = 0.3, height = 0, shape = 4) +
  scale_fill_soil +
    labs(
      title = 'Salinity (measured as Electrical Conductance) by Soil Type',
      y = "Electrical Conductance (dS/m)",
      x = "Soil type",
      fill = label_soil
    ) +
    scale_x_discrete(
      labels = soil_type_labels
    )
  
soil_salinity_by_type_plot

write_plot(soil_salinity_by_type_plot, "box-plot-salinity-by-type", "soil")


```

```{r}

soil_type_salinity_ttest = t.test(EC_dS_m ~ Soil_type, data = soil)

write_table(summarize_ttest(soil_type_salinity_ttest), "ttest-salinity-by-type", "soil")

soil_type_salinity_ttest
```

#### Multivariate Analysis?

```{r}

soil_matrix = as.matrix(mutate_all((soil[6:25]), as.numeric))
rownames(soil_matrix) = paste(soil$Location, soil$Depth, soil$Lab_sample_test_num, sep='-')


#relationship between salinity and scoured?
soil_matrix

# nmds = metaMDS(soil_matrix, distance = "bray", k = 2, autotransform=FALSE, noshare = FALSE)


#prcomp(soil_matrix, scale = TRUE)
```

### Question 3: Impact of Quantitative Soil Metrics on Plants

-   Specifically, salinity

#### Survival

Use one salinity value per location to match to shrubs. Take the average of salinity at a shallow depth.

```{r}
soil_salinity = soil |> 
  select(c(
    Location, 
    Depth, 
    EC_dS_m,
    Lab_sample_test_num
    )) |> 
  mutate(EC_dS_m= as.numeric(EC_dS_m)) |>
  group_by(Location, Depth) |> 
  summarise(
    EC_dS_m = mean(EC_dS_m)
  ) |> ungroup() |>
  filter(Depth != 'DEEP')
```

##### Data

```{r}
salinity_survival = soil_salinity |>
  inner_join(
    survival_data |> 
      select(c(
        shrub_id, 
        Site, 
        Survival_index,
        Species
        )),
    by = join_by(Location == Site)
  ) |>
  arrange(shrub_id) |> 
  mutate(
    Soil_id = paste(
      shrub_id,
      Depth,
      sep = "_")
  )
```

##### Visualize

```{r}
salinity_survival_plot = salinity_survival |> ggplot() +
  aes(x = EC_dS_m,y=Survival_index ,color = Species) +
  geom_jitter(height = 0.09, width = 5, shape = 4) +
  stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
  scale_color_species + 
  legend_species_theme +
  scale_y_continuous(
    breaks = c(0, 0.5, 1)
  ) + 
  labs(
    title = "Impact of Salinity (measured as Electrical Conductance) on \nSurvival per Species",
    x = label_ec,
    y = "Survival"
  )

salinity_survival_plot

write_plot(salinity_survival_plot, "scatter-plot", "survival-salinity")
```

##### Tests

```{r}

survival_salinity_anova = car::Anova(glm( 
  Survival_index ~ EC_dS_m * Species,
  data = salinity_survival,  
  family = binomial(link="logit"))
  )

summary(glm( 
  Survival_index ~ EC_dS_m * Species,
  data = salinity_survival,  
  family = binomial(link="logit"))
  )
car::Anova(glm( 
  Survival_index ~ EC_dS_m * Species,
  data = salinity_survival,  
  family = binomial(link="logit"))
  )

write_table(survival_salinity_anova, "anova-table", "survival-salinity")

survival_salinity_anova
```

#### Growth

##### Data

```{r}
salinity_growth_data = height_change_shrubs_alive |> inner_join(
  soil_salinity, by=join_by(Site == Location)
)

salinity_growth_data |> 
  filter(Percent_height_change < 2) |> 
  (`[[`)("Percent_height_change") |> shapiro.test()
```

##### Visualize

```{r}
salinity_growth_data |> filter(Percent_height_change < 2)|> ggplot() + 
  aes(x = EC_dS_m, y = Percent_height_change, color = Species) +
  geom_jitter(height = 0, width = 4, shape = 4) +
  stat_smooth(method="lm", se=FALSE) +
  scale_color_manual(values = viridis::viridis(5)) + 
  scale_color_species +
  legend_species_theme +
  labs(
    x = label_ec
  )
  
```

##### Tests

```{r}
growth_salinity_model = 
  lm(Percent_height_change ~ EC_dS_m * Species, data = salinity_growth_data 
     |> filter(Percent_height_change < 2)
     ) 

plot(growth_salinity_model)

growth_salinity_anova = car::Anova(growth_salinity_model)

write_table(growth_salinity_anova, "anova-table", "height-salinity")

growth_salinity_anova
```

#### Chlorophyll

##### Data

```{r}
chlorophyll_soil_data = chlorophyll_data_mean |> 
  inner_join(
    soil_salinity, by=join_by(Site == Location)
  )
```

##### Visualize

```{r}
chlorophyll_salinity_plot = chlorophyll_soil_data |> ggplot() + 
  aes(x = EC_dS_m, y = Mean_Chlorophyll, color = Species) +
  geom_jitter(height = 0, width = 4, shape = 4) +
  stat_smooth(method="lm", se=FALSE) +
  scale_color_species +
  legend_species_theme +
  labs(
    x = label_ec,
    y = "Mean Chlorophyll per Plant",
    title = "Impact of Salinity on Chlorophyll Content per Species"
  )

chlorophyll_salinity_plot

write_plot(chlorophyll_salinity_plot, "scatter-plot", "chlorophyll-salinity")


```

##### Linear regression

```{r}
chlorophyll_salinity_model = lm(Mean_Chlorophyll ~ EC_dS_m * Species, data = chlorophyll_soil_data) 
  
chlorophyll_salinity_anova = car::Anova(chlorophyll_salinity_model) 
 
write_table(chlorophyll_salinity_anova, "anova-table", "chlorophyll-salinity") 

chlorophyll_salinity_anova
```
